<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modules>
        <module>Implementation</module>
        <module>Package</module>
    </modules>

    <properties>
        <!-- centralize project release version, the tag name is predefined by mvn, don't change it -->
        <revision>1.0.0-SNAPSHOT</revision>

        <!-- common dependency version -->
        <snakeyaml-version>1.16</snakeyaml-version>
        <lombok-version>1.18.4</lombok-version>
        <slf4j-api-version>1.7.25</slf4j-api-version>
        <logback-version>1.2.3</logback-version>
        <junit-verion>4.12</junit-verion>



        <!-- reporting version for mvn site configuration-->
        <dependency-check-maven-version>5.2.2</dependency-check-maven-version>
        <maven-project-info-reports-plugin-version>2.9</maven-project-info-reports-plugin-version>
        <maven-surefire-report-version>2.22.1</maven-surefire-report-version>

        <!-- deb package location -->
        <deb-packaging-location>${basedir}/../Package/DebianPackageArchive/opt/tako/${project.name}</deb-packaging-location>

        <!-- global setting -->
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <!-- factor out common dependencies, centralize version control -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.yaml</groupId>
                <artifactId>snakeyaml</artifactId>
                <version>${snakeyaml-version}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok-version}</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j-api-version}</version>
            </dependency>

            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback-version}</version>
            </dependency>

            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-core</artifactId>
                <version>${logback-version}</version>
            </dependency>

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit-verion}</version>
                <scope>test</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>


    <!--======================================= Modification is unlikely =========================================-->

    <!-- Maven 3.6+ -->

    <modelVersion>4.0.0</modelVersion>

    <groupId>tako.research</groupId>
    <artifactId>Simple-Project-Template</artifactId>
    <packaging>pom</packaging>
    <version>${revision}</version>

    <build>
        <pluginManagement>
            <plugins>

                <!-- The jar package with all dependency -->
                <plugin>
                    <artifactId>maven-assembly-plugin</artifactId>
                    <configuration>
                        <descriptorRefs><descriptorRef>jar-with-dependencies</descriptorRef></descriptorRefs>
                        <outputDirectory>${project.build.directory}/jar-with-dependency</outputDirectory>
                    </configuration>
                    <executions>
                        <execution>
                            <id>make-assembly</id>
                            <phase>package</phase>
                            <goals><goal>single</goal></goals>
                        </execution>
                    </executions>
                </plugin>

                <!-- This plugin creates libraries and copy dependencies to Package module/ lib folder  -->
                <!-- https://stackoverflow.com/questions/8310539/
                     how-to-copy-dependencies-jars-without-test-jars-to-a-directory-using-maven         -->
                <plugin>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <executions>
                        <execution>
                            <phase>prepare-package</phase>
                            <goals><goal>copy-dependencies</goal></goals>
                            <configuration>
                                <outputDirectory>${project.build.directory}</outputDirectory>
                                <includeScope>runtime</includeScope>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>


                <!-- These 2 plugins copy content for deb package location
                        the resources-plugin copy module output to the package location
                        the clean-plugin delete the copied content
                        since they are standard maven plugin, they will attach to each module automatically
                -->
                <plugin>
                    <artifactId>maven-resources-plugin</artifactId>
                    <executions>
                        <execution>
                            <id>copy-script-content</id>
                            <phase>package</phase>
                            <goals><goal>copy-resources</goal></goals>
                            <configuration>
                                <outputDirectory>${deb-packaging-location}/script</outputDirectory>
                                <resources>
                                    <resource><directory>script</directory></resource>
                                </resources>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-conf-content</id>
                            <phase>package</phase>
                            <goals><goal>copy-resources</goal></goals>
                            <configuration>
                                <outputDirectory>${deb-packaging-location}/conf</outputDirectory>
                                <resources>
                                    <resource><directory>conf</directory></resource>
                                    <resource><directory>${basedir}/src/main/resources</directory></resource>
                                </resources>
                            </configuration>
                        </execution>
                        <execution>
                            <id>copy-lib-content</id>
                            <phase>package</phase>
                            <goals><goal>copy-resources</goal></goals>
                            <configuration>
                                <outputDirectory>${deb-packaging-location}/lib</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${project.build.directory}</directory>
                                        <includes><include>*.jar</include></includes>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                </plugin>

                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <configuration>
                        <filesets>
                            <fileset><directory>${deb-packaging-location}</directory></fileset>
                            <fileset><directory>**/*.deb</directory></fileset>
                        </filesets>
                    </configuration>
                </plugin>

            </plugins>
        </pluginManagement>
    </build>



    <!-- This generate module report, type: mvn site -->
    <!-- Each module has its own site independently.  In other word, the reporting setting apply to each module -->
    <reporting>
        <plugins>
            <!-- OWASP dependency security check -->
            <!-- report is found in target/dependency-check-report.html -->
            <!-- https://jeremylong.github.io/DependencyCheck/dependency-check-maven/ -->
            <plugin>
                <groupId>org.owasp</groupId>
                <artifactId>dependency-check-maven</artifactId>
                <version>${dependency-check-maven-version}</version>
                <reportSets><reportSet><reports><report>aggregate</report></reports></reportSet></reportSets>
            </plugin>

            <!-- this insert module info to the site above -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-project-info-reports-plugin</artifactId>
                <version>${maven-project-info-reports-plugin-version}</version>
            </plugin>

            <!-- this insert testing info to the site above -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <version>${maven-surefire-report-version}</version>
            </plugin>
        </plugins>
    </reporting>
</project>